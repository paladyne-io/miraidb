import{U as a,r as l}from"./main-DmtuxYzQ.js";const g=c=>{if(!c)return"";const n={year:"numeric",month:"long",day:"numeric"};return new Date(c).toLocaleDateString(void 0,n)};let s=null;const i=async()=>{console.log("Fetching user...");const{data:{user:c},error:n}=await a.auth.getUser();return n?(console.error("Error fetching user:",n),null):(s=c,s)};i();const _=()=>(l([]),l(!1),l(!1),l(null),{user:s,fetchCurrentUser:i,addCategory:async(r,e)=>{if(!r.trim())return console.error("Category name is required"),null;try{const{data:t,error:o}=await a.from("categories").insert({name:r.trim(),description:(e==null?void 0:e.trim())||null,user_id:s.id}).select();if(o)throw o;return t}catch(t){return console.error("Add category error:",t),null}},deleteCategory:async r=>{if(confirm("Are you sure you want to delete this category? This will also delete associated subcategories."))try{await a.from("sub_categories").delete().eq("category_id",r);const{error:e}=await a.from("categories").delete().eq("id",r);if(e)throw e;return!0}catch(e){return console.error("Delete category error:",e),!1}},updateCategory:async(r,e,t)=>{if(!e.trim())return alert("Category name is required"),!1;try{const{error:o}=await a.from("categories").update({name:e.trim(),description:(t==null?void 0:t.trim())||null,user_id:s.id}).eq("id",r);if(o)throw o;return!0}catch(o){return console.error("Update category error:",o),!1}},addSubcategory:async(r,e,t)=>{if(!e.trim())return alert("Subcategory name is required"),null;try{const{data:o,error:u}=await a.from("sub_categories").insert({name:e.trim(),category_id:r,description:(t==null?void 0:t.trim())||null,user_id:s.id}).select();if(u)throw u;return o}catch(o){return console.error("Failed to add subcategory. error:",o),null}},deleteSubcategory:async r=>{if(!confirm("Are you sure you want to delete this subcategory?"))return!1;try{const{error:e}=await a.from("sub_categories").delete().eq("id",r);if(e)throw e;return!0}catch(e){return console.error("Delete subcategory error:",e),!1}},updateSubcategory:async(r,e,t)=>{if(e.trim())return alert("Subcategory name is required"),!1;try{const{error:o}=await a.from("sub_categories").update({name:e.trim(),description:(t==null?void 0:t.trim())||null,user_id:s.id}).eq("id",r);if(o)throw o;return!0}catch(o){return console.error("Update subcategory error:",o),!1}},fetchCategories:async()=>{console.log("Fetching categories...");const{data:r,error:e}=await a.from("categories").select("*").order("name");return e?(console.error("Category fetch error:",e),[]):(console.log("Category fetch success."),r)},fetchSubCategories:async()=>{console.log("Fetching SubCategories...");const{data:r,error:e}=await a.from("sub_categories").select("*").order("name");return e?(console.error("Sub-category fetch error:",e),[]):(console.log("SubCategory fetch success."),r)},fetchSavedContextsWithFilter:async(r,e)=>{console.log("Fetching saved contexts with filter...");let t=a.from("extracted_content").select(`
    *,
    categories(name),
    sub_categories(name)
  `);r&&(t=t.eq("category_id",r)),e&&(t=t.eq("sub_category_id",e)),t=t.order("extracted_at",{ascending:!1});const{data:o,error:u}=await t;return u?(console.error("Fetch error:",u),[]):o},fetchSavedContexts:async()=>{console.log("Fetching saved contexts...");const{data:r,error:e}=await a.from("extracted_content").select("*").order("extracted_at",{ascending:!1});return e?(console.error("fetchSavedContexts error:",e),[]):(console.log("Fetched context records: ",r.length),r)},formatDate:g});export{_ as u};
